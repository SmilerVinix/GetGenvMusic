-- likes roblox exploites

--ðŸ”¥ Music Visualizer by Yoreflintz Vex x Davvon Mode ðŸ”¥
--ðŸŽ§ Real FFT bars, neon glow, pause/resume/stop, song picker + getgenv control for external control

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Songs, external URLs to mp3 files (require exploit with writefile & getcustomasset support)
local songs = {
    ["The Big Black"] = "https://raw.githubusercontent.com/SmilerVinix/CopyWriteMusicRblxBypass/main/The%20Quick%20Brown%20Fox%20-%20The%20Big%20Black.mp3",
    ["Love For You"] = "https://raw.githubusercontent.com/SmilerVinix/CopyWriteMusicRblxBypass/main/Love%20For%20You%20(Slowed%20Down)%20%5B%20ezmp3.cc%20%5D.mp3",
    ["Bye Bye Baby Blue"] = "https://raw.githubusercontent.com/SmilerVinix/CopyWriteMusicRblxBypass/main/ytmp3free.cc_glass-animals-bye-bye-baby-blue-the-other-side-of-paradise-lyrics-youtubemp3free.org.mp3"
}

-- Initialize getgenv variables (safe default)
getgenv().playSong = getgenv().playSong or nil
getgenv().pauseMusic = getgenv().pauseMusic or false
getgenv().resumeMusic = getgenv().resumeMusic or false
getgenv().stopMusic = getgenv().stopMusic or false

local soundPlaying = nil
local currentPlayingSong = nil

local function downloadAndPrepareSound(songName)
    local url = songs[songName]
    if not url then return end

    local fileName = songName:gsub("%s+", "") .. ".mp3"
    
    if not pcall(function() return readfile(fileName) end) then
        writefile(fileName, game:HttpGet(url))
    end
    
    return getcustomasset(fileName)
end

local function createSound(id)
    local sound = Instance.new("Sound")
    sound.Name = "VisualizerTrack"
    sound.SoundId = id
    sound.Volume = 1
    sound.Looped = false
    sound.Parent = player:WaitForChild("PlayerGui")
    return sound
end

local numBars = 20
local bars = {}

-- Create invisible bar frames for visualizer (optional, or skip to keep it GUI-free)
-- But if you want the pulsing bars, you'd keep these UI parts here
-- For pure no-GUI mode, comment this block out:

--[[
local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
ScreenGui.Name = "VisualizerBars"
local barFrame = Instance.new("Frame", ScreenGui)
barFrame.Size = UDim2.new(1, 0, 0, 100)
barFrame.Position = UDim2.new(0, 0, 1, -100)
barFrame.BackgroundTransparency = 1

for i = 1, numBars do
    local bar = Instance.new("Frame", barFrame)
    bar.Size = UDim2.new(0, 10, 0, 20)
    bar.Position = UDim2.new((i - 1)/numBars, 0, 1, -20)
    bar.BackgroundColor3 = Color3.fromRGB(0, 255, 170)
    bar.BorderSizePixel = 0

    local glow = Instance.new("UIStroke", bar)
    glow.Thickness = 2
    glow.Color = Color3.fromRGB(0, 255, 255)
    glow.Transparency = 0.3

    bars[i] = bar
end
]]

function playMusic(songName)
    if soundPlaying then
        soundPlaying:Stop()
        soundPlaying:Destroy()
        soundPlaying = nil
    end

    local assetId = downloadAndPrepareSound(songName)
    if not assetId then return end

    soundPlaying = createSound(assetId)
    soundPlaying:Play()
    currentPlayingSong = songName

    print("ðŸŽ¶ Now Playing: " .. songName)
end

RunService.RenderStepped:Connect(function()
    if soundPlaying and soundPlaying.IsPlaying then
        local success, fft = pcall(function()
            return soundPlaying:GetFFT(512)
        end)
        if success and fft then
            -- Visualizer logic here (optional if you keep bars)
            -- For no GUI, you can skip this or add your own handling
        end
    end
end)

-- Main loop watching getgenv controls
spawn(function()
    while true do
        wait(0.3)
        if getgenv().playSong and getgenv().playSong ~= currentPlayingSong then
            if songs[getgenv().playSong] then
                playMusic(getgenv().playSong)
            else
                warn("Song not found in list: ".. tostring(getgenv().playSong))
            end
        end

        if getgenv().pauseMusic then
            if soundPlaying and soundPlaying.IsPlaying then
                soundPlaying:Pause()
            end
            getgenv().pauseMusic = false
        end

        if getgenv().resumeMusic then
            if soundPlaying and not soundPlaying.IsPlaying then
                soundPlaying:Resume()
            end
            getgenv().resumeMusic = false
        end

        if getgenv().stopMusic then
            if soundPlaying then
                soundPlaying:Stop()
                soundPlaying:Destroy()
                soundPlaying = nil
                currentPlayingSong = nil
            end
            getgenv().stopMusic = false
        end
    end
end)

-- Example usage to pick a song from your external script or console:
-- getgenv().playSong = "Love For You"
-- getgenv().pauseMusic = true
-- getgenv().resumeMusic = true
-- getgenv().stopMusic = true

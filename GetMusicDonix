-- likes roblox exploites

--[[ 
üî• Music Visualizer by Yoreflintz Vex x Davvon Mode üî•
üéß Real FFT bars, neon glow, pause/resume/stop, song picker
 + getgenv control for external control
]]

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Songs, external URLs to mp3 files (require exploit with writefile & getcustomasset support)
local songs = {
    ["The Big Black"] = "https://raw.githubusercontent.com/SmilerVinix/CopyWriteMusicRblxBypass/main/The%20Quick%20Brown%20Fox%20-%20The%20Big%20Black.mp3",
    ["Love For You"] = "https://raw.githubusercontent.com/SmilerVinix/CopyWriteMusicRblxBypass/main/Love%20For%20You%20(Slowed%20Down)%20%5B%20ezmp3.cc%20%5D.mp3",
    ["Bye Bye Baby Blue"] = "https://raw.githubusercontent.com/SmilerVinix/CopyWriteMusicRblxBypass/main/ytmp3free.cc_glass-animals-bye-bye-baby-blue-the-other-side-of-paradise-lyrics-youtubemp3free.org.mp3"
}

-- Initialize getgenv variables (safe default)
getgenv().playSong = getgenv().playSong or nil
getgenv().pauseMusic = getgenv().pauseMusic or false
getgenv().resumeMusic = getgenv().resumeMusic or false
getgenv().stopMusic = getgenv().stopMusic or false

local gui = Instance.new("ScreenGui")
gui.Name = "DavvonVisualizer"
gui.ResetOnSpawn = false
gui.Parent = game.CoreGui

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 400, 0, 200)
frame.Position = UDim2.new(0.5, -200, 0.7, 0)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

-- Dropdown
local dropdown = Instance.new("TextButton", frame)
dropdown.Size = UDim2.new(1, -10, 0, 30)
dropdown.Position = UDim2.new(0, 5, 0, 5)
dropdown.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
dropdown.Text = "üéµ Select a Song"
dropdown.Font = Enum.Font.GothamBold
dropdown.TextSize = 14

local list = Instance.new("Frame", frame)
list.Position = UDim2.new(0, 5, 0, 40)
list.Size = UDim2.new(1, -10, 0, 100)
list.Visible = false
list.BackgroundTransparency = 1

local layout = Instance.new("UIListLayout", list)
layout.SortOrder = Enum.SortOrder.Name
layout.Padding = UDim.new(0, 2)

local controlBar = Instance.new("Frame", frame)
controlBar.Size = UDim2.new(1, -10, 0, 30)
controlBar.Position = UDim2.new(0, 5, 1, -35)
controlBar.BackgroundTransparency = 1

local function makeBtn(text, pos)
	local btn = Instance.new("TextButton", controlBar)
	btn.Size = UDim2.new(0.3, -5, 1, 0)
	btn.Position = pos
	btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Font = Enum.Font.GothamBold
	btn.TextSize = 14
	btn.Text = text
	return btn
end

local pauseBtn = makeBtn("‚è∏Ô∏è Pause", UDim2.new(0, 0, 0, 0))
local resumeBtn = makeBtn("‚ñ∂Ô∏è Resume", UDim2.new(0.35, 0, 0, 0))
local stopBtn = makeBtn("‚èπ Stop", UDim2.new(0.7, 0, 0, 0))

local barFrame = Instance.new("Frame", frame)
barFrame.Size = UDim2.new(1, -20, 0, 80)
barFrame.Position = UDim2.new(0, 10, 0.5, -10)
barFrame.BackgroundTransparency = 1

local bars = {}
local numBars = 20
for i = 1, numBars do
	local bar = Instance.new("Frame", barFrame)
	bar.Size = UDim2.new(0, 10, 0, 20)
	bar.Position = UDim2.new((i - 1)/numBars, 0, 1, -20)
	bar.BackgroundColor3 = Color3.fromRGB(0, 255, 170)
	bar.BorderSizePixel = 0

	local glow = Instance.new("UIStroke", bar)
	glow.Thickness = 2
	glow.Color = Color3.fromRGB(0, 255, 255)
	glow.Transparency = 0.3

	bars[i] = bar
end

local soundPlaying = nil
local currentPlayingSong = nil

local function downloadAndPrepareSound(songName)
	local url = songs[songName]
	if not url then return end

	local fileName = songName:gsub("%s+", "") .. ".mp3"
	
	if not pcall(function() return readfile(fileName) end) then
		writefile(fileName, game:HttpGet(url))
	end
	
	return getcustomasset(fileName)
end

local function createSound(id)
	local sound = Instance.new("Sound")
	sound.Name = "VisualizerTrack"
	sound.SoundId = id
	sound.Volume = 1
	sound.Looped = false
	sound.Parent = player:WaitForChild("PlayerGui")
	return sound
end

function playMusic(songName)
	if soundPlaying then
		soundPlaying:Stop()
		soundPlaying:Destroy()
		soundPlaying = nil
	end

	local assetId = downloadAndPrepareSound(songName)
	if not assetId then return end

	soundPlaying = createSound(assetId)
	soundPlaying:Play()
	currentPlayingSong = songName

	StarterGui:SetCore("SendNotification", {
		Title = "üé∂ Now Playing",
		Text = songName,
		Duration = 5
	})

	dropdown.Text = "üéµ " .. songName
end

dropdown.MouseButton1Click:Connect(function()
	list.Visible = not list.Visible
end)

for name, _ in pairs(songs) do
	local btn = Instance.new("TextButton", list)
	btn.Size = UDim2.new(1, 0, 0, 25)
	btn.Text = name
	btn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	btn.TextColor3 = Color3.new(1,1,1)
	btn.Font = Enum.Font.Gotham
	btn.TextSize = 14
	btn.Parent = list

	btn.MouseButton1Click:Connect(function()
		playMusic(name)
		list.Visible = false
	end)
end

RunService.RenderStepped:Connect(function()
	if soundPlaying and soundPlaying.IsPlaying then
		local success, fft = pcall(function()
			return soundPlaying:GetFFT(512)
		end)
		if success and fft then
			local binsPerBar = math.floor(#fft / numBars)
			for i = 1, numBars do
				local sum = 0
				for j = 1, binsPerBar do
					sum = sum + fft[(i - 1) * binsPerBar + j]
				end
				local avg = sum / binsPerBar
				local height = math.clamp(avg * 5000, 10, 120)
				local bar = bars[i]
				bar.Size = UDim2.new(0, 10, 0, height)
				bar.Position = UDim2.new(bar.Position.X.Scale, 0, 1, -height)
			end
		else
			for i, bar in ipairs(bars) do
				local h = math.random(10, 80)
				bar.Size = UDim2.new(0, 10, 0, h)
				bar.Position = UDim2.new(bar.Position.X.Scale, 0, 1, -h)
			end
		end
	else
		for i, bar in ipairs(bars) do
			bar.Size = UDim2.new(0, 10, 0, 20)
			bar.Position = UDim2.new(bar.Position.X.Scale, 0, 1, -20)
		end
	end
end)

pauseBtn.MouseButton1Click:Connect(function()
	if soundPlaying then soundPlaying:Pause() end
end)

resumeBtn.MouseButton1Click:Connect(function()
	if soundPlaying then soundPlaying:Resume() end
end)

stopBtn.MouseButton1Click:Connect(function()
	if soundPlaying then
		soundPlaying:Stop()
		soundPlaying:Destroy()
		soundPlaying = nil
		currentPlayingSong = nil
	end
end)

-- Monitor getgenv for external commands every 0.3 sec
spawn(function()
	while true do
		wait(0.3)
		-- Play new song if set and different
		if getgenv().playSong and getgenv().playSong ~= currentPlayingSong then
			if songs[getgenv().playSong] then
				playMusic(getgenv().playSong)
			else
				warn("Song not found in list: ".. tostring(getgenv().playSong))
			end
		end

		if getgenv().pauseMusic then
			if soundPlaying and soundPlaying.IsPlaying then
				soundPlaying:Pause()
			end
			getgenv().pauseMusic = false
		end

		if getgenv().resumeMusic then
			if soundPlaying and not soundPlaying.IsPlaying then
				soundPlaying:Resume()
			end
			getgenv().resumeMusic = false
		end

		if getgenv().stopMusic then
			if soundPlaying then
				soundPlaying:Stop()
				soundPlaying:Destroy()
				soundPlaying = nil
				currentPlayingSong = nil
			end
			getgenv().stopMusic = false
		end
	end
end)
